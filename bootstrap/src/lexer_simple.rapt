import token

extern fn strlen(s: *char) -> int;

fn is_digit(c: char) -> int {
    if c >= '0' && c <= '9' { return 1; }
    return 0;
}

export fn tokenize(input: *char) -> DynamicArray[Token] {
    let tokens = new [Token]();
    let i = 0;
    let len = strlen(input);
    
    while i < len {
        let c = input[i];
        let matched = 0;
        
        if matched == 0 && is_digit(c) != 0 {
            matched = 1;
            let start = i;
            while i < len && is_digit(input[i]) != 0 {
                i = i + 1;
            }
            let span = Span { start: start, end: i };
            let tok = Token { kind: token.TK_INTEGER(), span: span };
            tokens = tokens.push(tok);
        }
        
        if matched == 0 {
            i = i + 1;
        }
    }
    
    return tokens;
}

export fn dump(toks: DynamicArray[Token], input: *char) {
}
